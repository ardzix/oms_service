"""
Django settings for oms project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path
from django.utils.translation import gettext_lazy as _


# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@i&(1v5keg0%*wz5p!^=oqm-_edy5bh1eho$_#hqlc@jlfo$g)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

PRODUCTION = False

CORS_ORIGIN_ALLOW_ALL = True

ALLOWED_HOSTS = ["*"]


BASE_URL = os.getenv('BASE_URL', 'http://localhost:8000')
URL_PREFIX = os.getenv('URL_PREFIX', '')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'cart',
    'channel',
    'checkout',
    "rest_framework",
    "rest_framework.authtoken",
    "drf_yasg",
    'channels',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = 'oms.urls'


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'oms.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.getenv('DATABASE_NAME', os.path.join(BASE_DIR, 'db.sqlite3')),
        'USER': os.getenv('DATABASE_USER', ''),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', ''),
        'HOST': os.getenv('DATABASE_HOST', ''),
        'PORT': os.getenv('DATABASE_PORT', ''),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # 'compressor.finders.CompressorFinder',
)

# swagger settings
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "description": 'Token for authentication. Format: "Bearer {token}"',
        },
        "LangHeader": {
            "type": "apiKey",
            "in": "header",
            "name": "Accept-Language",
            "description": 'Language preference. Example: "en-us"',
        },
    },
    "SECURITY_REQUIREMENTS": [{"ApiKeyAuth": []}, {"LangHeader": []}],
    "USE_SESSION_AUTH": False,
}

LANGUAGES = [
    ("en", _("English")),
    ("id", _("Indonesian")),
    # other languages
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Channels setup
ASGI_APPLICATION = "oms.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

# Get the host and port for the gRPC services
MD_CATALOGUE_SERVICE_HOST = os.getenv('MD_CATALOGUE_SERVICE_HOST', 'localhost')
MD_CATALOGUE_SERVICE_PORT = os.getenv('MD_CATALOGUE_SERVICE_PORT', '50051')
MD_CHANNEL_SERVICE_HOST = os.getenv('MD_CHANNEL_SERVICE_HOST', 'localhost')
MD_CHANNEL_SERVICE_PORT = os.getenv('MD_CHANNEL_SERVICE_PORT', '50052')
PPL_POINT_SERVICE_HOST = os.getenv('PPL_POINT_SERVICE_HOST', 'localhost')
PPL_POINT_SERVICE_PORT = os.getenv('PPL_POINT_SERVICE_PORT', '50053')
PPL_PROMO_SERVICE_HOST = os.getenv('PPL_PROMO_SERVICE_HOST', 'localhost')
PPL_PROMO_SERVICE_PORT = os.getenv('PPL_PROMO_SERVICE_PORT', '50054')
PPL_LOYALTY_SERVICE_HOST = os.getenv('PPL_LOYALTY_SERVICE_HOST', 'localhost')
PPL_LOYALTY_SERVICE_PORT = os.getenv('PPL_LOYALTY_SERVICE_PORT', '50055')
PAYMENT_SERVICE_HOST = os.getenv('PAYMENT_SERVICE_HOST', 'localhost')
PAYMENT_SERVICE_PORT = os.getenv('PAYMENT_SERVICE_PORT', '50056')
OMS_CART_SERVICE_HOST = os.getenv('OMS_CART_SERVICE_HOST', 'localhost')
OMS_CART_SERVICE_PORT = os.getenv('OMS_CART_SERVICE_PORT', '50057')
OMS_CHANNEL_SERVICE_HOST = os.getenv('OMS_CHANNEL_SERVICE_HOST', 'localhost')
OMS_CHANNEL_SERVICE_PORT = os.getenv('OMS_CHANNEL_SERVICE_PORT', '50058')
OMS_CHECKOUT_SERVICE_HOST = os.getenv('OMS_CHECKOUT_SERVICE_HOST', 'localhost')
OMS_CHECKOUT_SERVICE_PORT = os.getenv('OMS_CHECKOUT_SERVICE_PORT', '50059')

# Pulsar
PULSAR_HOST = os.getenv('PULSAR_HOST', 'localhost')
PULSAR_PORT = os.getenv('PULSAR_PORT', '6650')