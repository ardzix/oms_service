# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import channel_pb2 as channel__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in channel_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class ChannelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBrand = channel.unary_unary(
                '/channel.ChannelService/GetBrand',
                request_serializer=channel__pb2.GetBrandRequest.SerializeToString,
                response_deserializer=channel__pb2.BrandResponse.FromString,
                _registered_method=True)
        self.CreateBrand = channel.unary_unary(
                '/channel.ChannelService/CreateBrand',
                request_serializer=channel__pb2.CreateBrandRequest.SerializeToString,
                response_deserializer=channel__pb2.BrandResponse.FromString,
                _registered_method=True)
        self.UpdateBrand = channel.unary_unary(
                '/channel.ChannelService/UpdateBrand',
                request_serializer=channel__pb2.UpdateBrandRequest.SerializeToString,
                response_deserializer=channel__pb2.BrandResponse.FromString,
                _registered_method=True)
        self.DeleteBrand = channel.unary_unary(
                '/channel.ChannelService/DeleteBrand',
                request_serializer=channel__pb2.DeleteBrandRequest.SerializeToString,
                response_deserializer=channel__pb2.Empty.FromString,
                _registered_method=True)
        self.ListBrands = channel.unary_unary(
                '/channel.ChannelService/ListBrands',
                request_serializer=channel__pb2.Empty.SerializeToString,
                response_deserializer=channel__pb2.ListBrandsResponse.FromString,
                _registered_method=True)
        self.GetChannel = channel.unary_unary(
                '/channel.ChannelService/GetChannel',
                request_serializer=channel__pb2.GetChannelRequest.SerializeToString,
                response_deserializer=channel__pb2.ChannelResponse.FromString,
                _registered_method=True)
        self.CreateChannel = channel.unary_unary(
                '/channel.ChannelService/CreateChannel',
                request_serializer=channel__pb2.CreateChannelRequest.SerializeToString,
                response_deserializer=channel__pb2.ChannelResponse.FromString,
                _registered_method=True)
        self.UpdateChannel = channel.unary_unary(
                '/channel.ChannelService/UpdateChannel',
                request_serializer=channel__pb2.UpdateChannelRequest.SerializeToString,
                response_deserializer=channel__pb2.ChannelResponse.FromString,
                _registered_method=True)
        self.DeleteChannel = channel.unary_unary(
                '/channel.ChannelService/DeleteChannel',
                request_serializer=channel__pb2.DeleteChannelRequest.SerializeToString,
                response_deserializer=channel__pb2.Empty.FromString,
                _registered_method=True)
        self.ListChannels = channel.unary_unary(
                '/channel.ChannelService/ListChannels',
                request_serializer=channel__pb2.Empty.SerializeToString,
                response_deserializer=channel__pb2.ListChannelsResponse.FromString,
                _registered_method=True)
        self.GetEvent = channel.unary_unary(
                '/channel.ChannelService/GetEvent',
                request_serializer=channel__pb2.GetEventRequest.SerializeToString,
                response_deserializer=channel__pb2.EventResponse.FromString,
                _registered_method=True)
        self.CreateEvent = channel.unary_unary(
                '/channel.ChannelService/CreateEvent',
                request_serializer=channel__pb2.CreateEventRequest.SerializeToString,
                response_deserializer=channel__pb2.EventResponse.FromString,
                _registered_method=True)
        self.UpdateEvent = channel.unary_unary(
                '/channel.ChannelService/UpdateEvent',
                request_serializer=channel__pb2.UpdateEventRequest.SerializeToString,
                response_deserializer=channel__pb2.EventResponse.FromString,
                _registered_method=True)
        self.DeleteEvent = channel.unary_unary(
                '/channel.ChannelService/DeleteEvent',
                request_serializer=channel__pb2.DeleteEventRequest.SerializeToString,
                response_deserializer=channel__pb2.Empty.FromString,
                _registered_method=True)
        self.ListEvents = channel.unary_unary(
                '/channel.ChannelService/ListEvents',
                request_serializer=channel__pb2.Empty.SerializeToString,
                response_deserializer=channel__pb2.ListEventsResponse.FromString,
                _registered_method=True)
        self.AddBrandToEvent = channel.unary_unary(
                '/channel.ChannelService/AddBrandToEvent',
                request_serializer=channel__pb2.AddBrandToEventRequest.SerializeToString,
                response_deserializer=channel__pb2.EventResponse.FromString,
                _registered_method=True)
        self.RemoveBrandFromEvent = channel.unary_unary(
                '/channel.ChannelService/RemoveBrandFromEvent',
                request_serializer=channel__pb2.RemoveBrandFromEventRequest.SerializeToString,
                response_deserializer=channel__pb2.EventResponse.FromString,
                _registered_method=True)
        self.SetBrandsForEvent = channel.unary_unary(
                '/channel.ChannelService/SetBrandsForEvent',
                request_serializer=channel__pb2.SetBrandsForEventRequest.SerializeToString,
                response_deserializer=channel__pb2.EventResponse.FromString,
                _registered_method=True)


class ChannelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBrand(self, request, context):
        """CRUD operations for Brand
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBrands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannel(self, request, context):
        """CRUD operations for Channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvent(self, request, context):
        """CRUD operations for Event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddBrandToEvent(self, request, context):
        """Add, remove, and set brands for an event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveBrandFromEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBrandsForEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChannelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBrand,
                    request_deserializer=channel__pb2.GetBrandRequest.FromString,
                    response_serializer=channel__pb2.BrandResponse.SerializeToString,
            ),
            'CreateBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBrand,
                    request_deserializer=channel__pb2.CreateBrandRequest.FromString,
                    response_serializer=channel__pb2.BrandResponse.SerializeToString,
            ),
            'UpdateBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBrand,
                    request_deserializer=channel__pb2.UpdateBrandRequest.FromString,
                    response_serializer=channel__pb2.BrandResponse.SerializeToString,
            ),
            'DeleteBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBrand,
                    request_deserializer=channel__pb2.DeleteBrandRequest.FromString,
                    response_serializer=channel__pb2.Empty.SerializeToString,
            ),
            'ListBrands': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBrands,
                    request_deserializer=channel__pb2.Empty.FromString,
                    response_serializer=channel__pb2.ListBrandsResponse.SerializeToString,
            ),
            'GetChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannel,
                    request_deserializer=channel__pb2.GetChannelRequest.FromString,
                    response_serializer=channel__pb2.ChannelResponse.SerializeToString,
            ),
            'CreateChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChannel,
                    request_deserializer=channel__pb2.CreateChannelRequest.FromString,
                    response_serializer=channel__pb2.ChannelResponse.SerializeToString,
            ),
            'UpdateChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateChannel,
                    request_deserializer=channel__pb2.UpdateChannelRequest.FromString,
                    response_serializer=channel__pb2.ChannelResponse.SerializeToString,
            ),
            'DeleteChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteChannel,
                    request_deserializer=channel__pb2.DeleteChannelRequest.FromString,
                    response_serializer=channel__pb2.Empty.SerializeToString,
            ),
            'ListChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChannels,
                    request_deserializer=channel__pb2.Empty.FromString,
                    response_serializer=channel__pb2.ListChannelsResponse.SerializeToString,
            ),
            'GetEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvent,
                    request_deserializer=channel__pb2.GetEventRequest.FromString,
                    response_serializer=channel__pb2.EventResponse.SerializeToString,
            ),
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=channel__pb2.CreateEventRequest.FromString,
                    response_serializer=channel__pb2.EventResponse.SerializeToString,
            ),
            'UpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEvent,
                    request_deserializer=channel__pb2.UpdateEventRequest.FromString,
                    response_serializer=channel__pb2.EventResponse.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=channel__pb2.DeleteEventRequest.FromString,
                    response_serializer=channel__pb2.Empty.SerializeToString,
            ),
            'ListEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEvents,
                    request_deserializer=channel__pb2.Empty.FromString,
                    response_serializer=channel__pb2.ListEventsResponse.SerializeToString,
            ),
            'AddBrandToEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AddBrandToEvent,
                    request_deserializer=channel__pb2.AddBrandToEventRequest.FromString,
                    response_serializer=channel__pb2.EventResponse.SerializeToString,
            ),
            'RemoveBrandFromEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveBrandFromEvent,
                    request_deserializer=channel__pb2.RemoveBrandFromEventRequest.FromString,
                    response_serializer=channel__pb2.EventResponse.SerializeToString,
            ),
            'SetBrandsForEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBrandsForEvent,
                    request_deserializer=channel__pb2.SetBrandsForEventRequest.FromString,
                    response_serializer=channel__pb2.EventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'channel.ChannelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('channel.ChannelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChannelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/GetBrand',
            channel__pb2.GetBrandRequest.SerializeToString,
            channel__pb2.BrandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/CreateBrand',
            channel__pb2.CreateBrandRequest.SerializeToString,
            channel__pb2.BrandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/UpdateBrand',
            channel__pb2.UpdateBrandRequest.SerializeToString,
            channel__pb2.BrandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/DeleteBrand',
            channel__pb2.DeleteBrandRequest.SerializeToString,
            channel__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListBrands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/ListBrands',
            channel__pb2.Empty.SerializeToString,
            channel__pb2.ListBrandsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/GetChannel',
            channel__pb2.GetChannelRequest.SerializeToString,
            channel__pb2.ChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/CreateChannel',
            channel__pb2.CreateChannelRequest.SerializeToString,
            channel__pb2.ChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/UpdateChannel',
            channel__pb2.UpdateChannelRequest.SerializeToString,
            channel__pb2.ChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/DeleteChannel',
            channel__pb2.DeleteChannelRequest.SerializeToString,
            channel__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/ListChannels',
            channel__pb2.Empty.SerializeToString,
            channel__pb2.ListChannelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/GetEvent',
            channel__pb2.GetEventRequest.SerializeToString,
            channel__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/CreateEvent',
            channel__pb2.CreateEventRequest.SerializeToString,
            channel__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/UpdateEvent',
            channel__pb2.UpdateEventRequest.SerializeToString,
            channel__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/DeleteEvent',
            channel__pb2.DeleteEventRequest.SerializeToString,
            channel__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/ListEvents',
            channel__pb2.Empty.SerializeToString,
            channel__pb2.ListEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddBrandToEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/AddBrandToEvent',
            channel__pb2.AddBrandToEventRequest.SerializeToString,
            channel__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveBrandFromEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/RemoveBrandFromEvent',
            channel__pb2.RemoveBrandFromEventRequest.SerializeToString,
            channel__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetBrandsForEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/channel.ChannelService/SetBrandsForEvent',
            channel__pb2.SetBrandsForEventRequest.SerializeToString,
            channel__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
