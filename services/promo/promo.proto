syntax = "proto3";

package promo;

service PromoService {
    // Check promotion for a single item, including discount, point purchase, and optional coupon code
    rpc CheckItemPromo (CheckItemPromoRequest) returns (CheckItemPromoResponse);
    
    // Check promotion for a list of items to determine bundle or threshold-based promos with optional coupon code
    rpc CheckItemsPromos (CheckItemsPromosRequest) returns (CheckItemsPromosResponse);
    
    // Other existing services
    rpc GetPromoByHash (PromoByHashRequest) returns (PromoByHashResponse);
    rpc ListPromos (ListPromosRequest) returns (ListPromosResponse);
    rpc DeletePromo (DeletePromoRequest) returns (DeletePromoResponse);

    // Create/Update Promo types
    rpc CreateDiscountPromo (CreateDiscountPromoRequest) returns (PromoResponse);
    rpc UpdateDiscountPromo (UpdateDiscountPromoRequest) returns (PromoResponse);

    rpc CreateBundlePromo (CreateBundlePromoRequest) returns (PromoResponse);
    rpc UpdateBundlePromo (UpdateBundlePromoRequest) returns (PromoResponse);

    rpc CreateThresholdPromo (CreateThresholdPromoRequest) returns (PromoResponse);
    rpc UpdateThresholdPromo (UpdateThresholdPromoRequest) returns (PromoResponse);

    rpc CreatePointPurchasePromo (CreatePointPurchasePromoRequest) returns (PromoResponse);
    rpc UpdatePointPurchasePromo (UpdatePointPurchasePromoRequest) returns (PromoResponse);
}

// Check single item promotion
message CheckItemPromoRequest {
    string product_hash = 1;  // Product to check promotion for
    string coupon_code = 2;   // Optional coupon code to apply
}

message CheckItemPromoResponse {
    DiscountPromoInfo discount_promo = 1;
    PointPurchasePromoInfo point_purchase_promo = 2;
}

// Check promotions for a list of items (e.g. cart or checkout)
message CheckItemsPromosRequest {
    repeated Item items = 1;     // List of items to check
    string coupon_code = 2;      // Optional coupon code to apply
    double subtotal = 3;         // Total subtotal for checking threshold promos
}

message CheckItemsPromosResponse {
    repeated BundlePromoInfo bundle_promos = 1;
    ThresholdPromoResponse threshold_promo = 2;
}

// Promo Detail Messages
message Item {
    string product_hash = 1;  // Product identifier
    int32 quantity = 2;       // Quantity of the product
    double unit_price = 3;    // Unit price of the product
}

message DiscountPromoInfo {
    string promo_hash = 1;
    string discount_type = 2;
    double discount_value = 3;
    string product_hash = 4;
    double final_price = 5;
}

message BundlePromoInfo {
    string promo_hash = 1;
    repeated RequiredProductDetails required_products = 2;
    repeated BundleProductDetails bundle_products = 3;
    double bundle_price = 4;
}

message PointPurchasePromoInfo {
    string promo_hash = 1;
    string product_hash = 2;
    int32 points_required = 3;
}

// Definitions for RequiredProductDetails and BundleProductDetails
message RequiredProductDetails {
    string product_hash = 1;
    int32 quantity_required = 2;
}

message BundleProductDetails {
    string product_hash = 1;
    int32 quantity = 2;
    double product_price = 3;  // Price of the product (0 if free)
}

// Promo Creation and Update Requests
message CreateDiscountPromoRequest {
    string name = 1;
    string description = 2;
    string start_date = 3;
    string end_date = 4;
    bool active = 5;
    string brand_hash = 6;
    string channel_hash = 7;
    string event_hash = 8;
    DiscountPromoDetails discount_promo = 9;
    CouponDetails coupon = 10;
    PromoUsageLimits usage_limits = 11;
}

message UpdateDiscountPromoRequest {
    string promo_hash = 1;
    string name = 2;
    string description = 3;
    string start_date = 4;
    string end_date = 5;
    bool active = 6;
    string brand_hash = 7;
    string channel_hash = 8;
    string event_hash = 9;
    DiscountPromoDetails discount_promo = 10;
    CouponDetails coupon = 11;
    PromoUsageLimits usage_limits = 12;
}

// Remaining promo types and definitions
message CreateBundlePromoRequest {
    string name = 1;
    string description = 2;
    string start_date = 3;
    string end_date = 4;
    bool active = 5;
    string brand_hash = 6;
    string channel_hash = 7;
    string event_hash = 8;
    BundlePromoDetails bundle_promo = 9;
    CouponDetails coupon = 10;
    PromoUsageLimits usage_limits = 11;
}

message UpdateBundlePromoRequest {
    string promo_hash = 1;
    string name = 2;
    string description = 3;
    string start_date = 4;
    string end_date = 5;
    bool active = 6;
    string brand_hash = 7;
    string channel_hash = 8;
    string event_hash = 9;
    BundlePromoDetails bundle_promo = 10;
    CouponDetails coupon = 11;
    PromoUsageLimits usage_limits = 12;
}

message CreateThresholdPromoRequest {
    string name = 1;
    string description = 2;
    string start_date = 3;
    string end_date = 4;
    bool active = 5;
    string brand_hash = 6;
    string channel_hash = 7;
    string event_hash = 8;
    ThresholdPromoDetails threshold_promo = 9;
    CouponDetails coupon = 10;
    PromoUsageLimits usage_limits = 11;
}

message UpdateThresholdPromoRequest {
    string promo_hash = 1;
    string name = 2;
    string description = 3;
    string start_date = 4;
    string end_date = 5;
    bool active = 6;
    string brand_hash = 7;
    string channel_hash = 8;
    string event_hash = 9;
    ThresholdPromoDetails threshold_promo = 10;
    CouponDetails coupon = 11;
    PromoUsageLimits usage_limits = 12;
}

message CreatePointPurchasePromoRequest {
    string name = 1;
    string description = 2;
    string start_date = 3;
    string end_date = 4;
    bool active = 5;
    string brand_hash = 6;
    string channel_hash = 7;
    string event_hash = 8;
    PointPurchasePromoDetails point_purchase_promo = 9;
    CouponDetails coupon = 10;
    PromoUsageLimits usage_limits = 11;
}

message UpdatePointPurchasePromoRequest {
    string promo_hash = 1;
    string name = 2;
    string description = 3;
    string start_date = 4;
    string end_date = 5;
    bool active = 6;
    string brand_hash = 7;
    string channel_hash = 8;
    string event_hash = 9;
    PointPurchasePromoDetails point_purchase_promo = 10;
    CouponDetails coupon = 11;
    PromoUsageLimits usage_limits = 12;
}

// Promo Detail Messages
message DiscountPromoDetails {
    string discount_type = 1;
    double discount_value = 2;
    string product_hash = 3;
}

message BundlePromoDetails {
    repeated RequiredProductDetails required_products = 1;
    repeated BundleProductDetails bundle_products = 2;
    double bundle_price = 3;
    bool applies_multiple = 4;
    double min_purchase_amount = 5;
}

message ThresholdPromoDetails {
    double threshold_amount = 1;
    double discount_value = 2;
}

message PointPurchasePromoDetails {
    string product_hash = 1;
    int32 points_required = 2;
}

// Coupon and Usage Limits Details
message CouponDetails {
    string code = 1;          // The coupon code for fungible codes
    repeated string codes = 2; // List of codes for non-fungible codes
    bool fungible = 3;         // Whether the coupon code is fungible (single code for multiple uses) or non-fungible (unique code per use)
}

message PromoUsageLimits {
    int32 max_uses_per_user = 1; // Maximum number of times a single user can use the promo
    repeated string whitelisted_users = 2; // List of whitelisted user IDs for the promo
}

// List and Delete Promos
message ListPromosRequest {
    int32 page = 1;  // Page number (optional, default is 1)
    int32 page_size = 2;  // Page size (optional, default is 10)
    string promo_type = 3;  // Optional filter by promo type
    string brand_hash = 4;  // Optional filter by brand hash
    string channel_hash = 5;  // Optional filter by channel hash
    string event_hash = 6;  // Optional filter by event hash
    bool active = 7;  // Optional filter by active status
}

message ListPromosResponse {
    repeated PromoInfo promos = 1;
    int32 total_count = 2;  // Total number of promos
    int32 page = 3;  // Current page
    int32 page_size = 4;  // Page size
}

message PromoInfo {
    string promo_hash = 1;
    string name = 2;
    string description = 3;
    string promo_type = 4;
    string start_date = 5;
    string end_date = 6;
    bool active = 7;
    string brand_hash = 8;
    string channel_hash = 9;
    string event_hash = 10;
}

// Promo Response
message PromoResponse {
    string promo_hash = 1;
}

// Threshold and Delete Promo
message ThresholdPromoRequest {
    double subtotal = 1;
}

message ThresholdPromoResponse {
    bool has_threshold_promo = 1;
    double discount_value = 2;
}

message DeletePromoRequest {
    string promo_hash = 1;
}

message DeletePromoResponse {
    bool success = 1;
}

message PromoByHashRequest {
    string promo_hash = 1;
}

message PromoByHashResponse {
    string promo_hash = 1;
    string name = 2;
    string description = 3;
    string promo_type = 4;
    string start_date = 5;
    string end_date = 6;
    bool active = 7;
    string brand_hash = 8;
    string channel_hash = 9;
    string event_hash = 10;
}
